                            객체지향프로그래밍&클래스
1.프로그래밍 방법론
    1)절차식 프로그래밍
        -초기의 컴퓨터 언어는 순차적인 명령을 수행하고 간단한 분기만 가능했었음. (어셈블리) (goto문)
    2)구조적 프로그래밍(structure)
        -특정 변수를 묶어 구조화하고 이를 통해 프로그래밍 효율을 높임(c언어)(순차,선택, 반복)(기능을 함수등으로 모듈화)
    3)객체지향프로그래밍
        -객체를 기반으로 프로그래밍되며 클래스(class),속성(attribute),동작(behavior)등 현실세계의 모델을 반영함
        
        [구조적 프로그래밍 자체도 개발에 있어서 좋은 점들을 가져다 줬지만, 갈수록 협업이 중시되며 여러 사람이 함께 작업을 하자, 구조적 프로그래밍에서도 문제점이 발견되게 됩니다.바로 어떤 표현에 대한 속성과 행위가 개별로 분리된다는 점 입니다. 코드가 점점 거대화 되면서 분리된 속성과 행위를 바로 알아내기 힘들어졌고, 이에 대한 대책으로 이들을 하나의 개념으로 묶어서 표현하자는 개념인 객체지향 프로그래밍이 등장하게 되었습니다.
        
        구조적 프로그래밍에서는 자동차의 색, 종류와 같은 속성과 시동을 건다/끈다와 같은 코드 자체는 분리가 됩니다. 하지만, 구조적 프래그래밍의 특성상 같은 파일에 위치하더라도 코드가 방대해지면 속성과 행위가 연관이 있다는 것을 쉽게 알 수가 없게됩니다.]

    4)함수형 프로그래밍
        -객체의 형태를 벗어나 함수형을 확장해 함수를 변수처럼 사용가능.

2.Object 컴퓨터 관점에서의 객체
    1)Real World
        -객체는 어떤 상태(status)혹은 값(Variable)이거나 행동(behavior)을 가지고 있음.
    2)Computer World
        -특정 일을 수행하기 위한 변수와 기능(function)으로 이루어진 작은 프로그램의 집합체로 컴퓨터 메모리에 상주하며(메모리상에 올라와 있을때 객체라고 칭함) 필요시에 사용됨.
        객체는 변수(variable)와 함수, 즉 property는 속성을 칭하는 단어(field는 그 속성의 실체가 담기는 변수),method를 가지고 있으며 메모리에 생성된 상태임
        인스턴스(instance)라고도 부르나 객체가 보다 포괄적인 의미임.

3.객체지향 프로그래밍의 장점
    1)c,asm
        -빨리 만들어서 한정된 시간안에 요구기능을 구현
        -기능변경, 재사용이 어렵다. (특정 기기에 최적화된 프로그래밍)
        -저수준 언어 및 절차지향
    2)java,c++,python,kotlin 등
        -빨리 만드는 것 보다 요구사항 변경에 유연하게 대처하고 기능변경,재사용을 쉽게 하기 좋음.
        고수준 및 객체 지향

4. 객체와 객체지향프로그래밍 OOP
    1.Object
        -구체적 데이터(물리적인 개체, 메모리상에 존재하기때문)
            -ex)개, 고양이, 호랑이
            -추상적인 데이터의 단위(개념적인 객체)
            예)주문, 배송
    2.절차지향vs객체지향
        절차지향
            -시간, 사건의 흐름에 따른 프로그래밍
            일어난다->씻는다->밥을 먹는다->버스를 탄다 ......
        객체지향            
                            (먹는다)
            훈련생 <------------------->밥
                |
                |
                |
               버스

               객체지향 역시 절차 지향과 동일한 순서로 실행됩니다. 다만 절차지향은 데이터를 중심으로 함수를 구현하고, 이에 반해 객체지향은 기능을 중심으로 메소드를 구현하게 됩니다.

                절차지향 언어를 사용한다면, 말 그래도 실행순서, 절차가 더 중점이 되고, 객체지향 언어를 사용한다면, 필요한 객체들의 종류와 속성 등이 더 중점이 됩니다.

                즉, 절차지향의 반대는 객체지향이 아니고, 객체지향의 반대는 절차지향이 아닙니다.



            -객체를 정의(클래스로 구현. 클래스=설계도)
            각 객체 제공하는 기능들을 구현하고
            각 객체가 제공하는 기능들 간의 메시지 전달을 통하여 객체간의 협력을 구현

            캡슐화(모듈)
            상속(super class, sub class. field와 method를 유지)
            다형성-같은 메소드가 클래스 혹은 객체에 따라 다르게 구현됨. method overriding, method overloading

5. 클래스
    1)어떤 부류,등급,종류, 분류되다 (사전적 의미)
    2)일종의 청사진
    3)객체와 관련된 데이터와 처리동작을 한데 모은 코드뭉치임
    4)어느정도 특징적인 데이터와 동작으로 일반화할 필요가 있음 추상화(abstraction)
        명사적인 특징을 뽑아내 추상화
            field 추출
            멤버변수(field)==메소드 밖에서 선언된 변수. (<->지역변수 local variable==메소드 안에서 선언된 변수) 
        동사적인 특징을 뽑아내 추상화
            method 추출

    5)일종의 사용자가 정의한 형식(type)으로 개념일뿐. 객체를 통해 메모리에 할당될때(instance될때) 비로소 사용 가능


    