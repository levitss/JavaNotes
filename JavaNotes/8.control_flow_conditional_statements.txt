제어문&조건문

1. 제어문
    1)프로그램의 진행 흐름을 필요에 따라서 변경
    2)프로그램은 코드가 입력된 순서대로 실행이 됨
        이렇게하면 단순한 동작만 실행가능
    3)상황에 따라 다른 동작 또는 반복 동작을 해야 하는 경우
     -조건문, 반복문

2. 조건문
    1)조건식의 결과가 true, false 인 경우 두 가지 흐름을 만들 수 있음



3. if문을 사용한 조건분기


    ex) 재산이 1억이상, 100만세금, 내지않음
    if문
    if(property>1억){
        tax=100만;             //참이면 수행
        }
                             //참이 아니면 수행x
        
    
    if~else문
    if(property>1억){
        tax=100         //참이면 수행
    }
    else{
        tax=0           //참이 아니면 수행
    }

    if~else if~else 문
        -하나의 상황에 대한 조건이 여러개로 나뉘고 각 조건에 다른 수행이 이루어져야 할 경우 사용
        -각 조건은 상호배타적


    i=60
    if(i>90){
        system.out.println("수");
    } else if(i>80) {
        system.out.println("우");
    }
    else if(i>70){
        system.out.println("미");
    }
    else{
        System.out.println("퇴학");
    }
    

4. Switch-case문
    1) 조건이 여러개일때 간단히 사용
    2)if-else if -else문 사용할 때 복잡한 부분을 가독성 좋게 표현
    3) break 문을 사용하여 각 조건이 만족되면 switch 빠져나오게 함
    4)syntax
        swithc(조건식){
            case 1:
                처리문~~~~
                ~~~~
                break;
            case 2:
                ~~~~
                break;
            .
            .
            .
            default:                //반드시 실행되어야 하는 경우
                ~~
        }
    5)java14부터 간결해진 표현식 지원됨.
        쉼표로 조건부분
        식으로 표현하여 switch문 자체 return을 받을 수 있게 됨
            yield 키워드 사용
            화살표 연산자. 
            case  1,3,4->{
                ~~~~
            }

            