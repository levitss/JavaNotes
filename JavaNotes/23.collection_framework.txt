1. 자료구조
    1.배열[]
        크기가 고정되어있음. 같은 타입 제한
        새로 배열 만들어서 크기 변경 (string과 유사)
    2.리스트   
        
        연결 리스트
            원소가 다른 원소를 가리켜서 관리하는 자료구조
            원소의 물리적 저장 순서 ≠ 원소 논리적 순서, 
            데이터 추가, 삭제가 용이하다.
            data+link->data+link->data+link->null
            data+link  data+link->data+link->null
                    |    |
                   data+link
            데이터 추가시        
            더블 링크드 리스트
            링크드 리스트는 이동방향이 단방향이기 때문에 다음 요소에 대한 접근은 쉽지만, 이전요소에 대한 접근은 어렵다.
            이 점을 보완한 것이 더블 링크드 리스트(이중 연결리스트, doubly linked list) 이다.



        스택 
        한쪽 끝에서만 자료를 넣거나 뺄 수 있는 구조
        선입후출
        Last In First Out
        push&pop
        python의 list.pop

        큐 Queue 
        선입선출 enqueue/dequeue front/rear
        순서없는 배열, 순서없는 연결리스트
        정렬된 배열, 정렬된 연결리스트
        힙으로 구현 가능하나 힙이 제일 무난함()

        트리구조
        루트노드 내부노드 단말노드로 구성됨
        부모노드와 자식노드간의 연결로 이루어진 자료 구조







2.Collection Framework structure
    1. Iterable(반복)<-------collection<--------list<E>
                            |                    set<E>
                            -Map<K,V>

            list<E>
                동적인 배열 순서가 있음(인덱스)
                추가된 데이터의 순서도 유지 데이터 중복도 허용됨
                ArrayList(동기화 보장하지 않음), LinkedList,Stack,Queue,Vector(동기화 보장)
                list는 인터페이스
                arraylist는 클래스
            set<E>
                순서없고 중복허용안됨
                hashset, sortedset->treeset

            Map<K,V>
            python의 dict
            key는 중복 허용하지 않는다
            hashmap(동기화 보장하지 않음),hashtable(동기화 보장),sortedmap, treemap

3. Iterator 
    1. 컬렉션 프레임워크에 저장된 요소들을 하나씩 차례로 참조하는 기능 제공
    2. 순서가 있는 list 인터페이스의 경우는 Iterator 사용하지 않고 get()메서드 사용해도 됨
    3. set인터페이스는 get()제공 안됨. iterator 활용하여 객체를 순차적으로 접근.
    4.메서드
        boolean hasNext()
            이후에 요소가 더 있는지 체크하고 있으면 true
        E next()
            다음에 있는 요소를 반환
////////////////////////////////////////////////////////
get 메서드가 실행되며 i 값이 증가할 때마다 메모리적으로 조회해야 하는 요소는 1번, 2번, 3번, 4번... 101번까지 증가하는 것이다. 총 5151번을 조회해야 한다.
이에반해 Iterator는 1부터 101번째까지의 요소에 대해 내부적으로 객체로 생성한 후 순차적으로 조회한다.
처음 주소로 돌아갈 필요가 없기때문에 next 메서드를 통해 조회 시 요소의 개수인 101번만 조회를 하게된다.
그렇다면 드는 생각. 속도면에서 훨씬 빠르지않을까?
훨씬 빠를것이라고 생각했으나... Iterator를 구현하기 위해 객체를 생성하는 부분에서 시간이 더 걸린다고 한다
물론 그 차이는 크지 않지만...
////////////////////////////////////////////////////////////////////////////////////////////////////////////


4. Set 인터페이스를 구현한 클래스
    1. 멤버의 중복여부를 체크하기 위해 인스턴스의 논리적인 동일성을 확인해야 함
    2. 동일성 구현을 위해 필요에 따라 equals와 hashcode메서드를 재정의 해야 함
    This class implements the Set interface, backed by a hash table
    3. treeset
        정렬을 지원하는 tree 클래스의 영향을 받아 정렬되는 set
        이진검색트리로 구현됨
        이진검색트리에 저장하기 위해 각 객체를 비교해야 함
        비교대사이 되는 객체에 comparable이나 comparator 인터페이스를 구현해야 treeset에 추가될 수 있음.
            -String,Integer 등 jdk의 많은 클래스들은 이미 Comparable interface를 구현했음.


5. 트리
    1. heap:Priority queue를 구현(우선 큐)
        힙(heap)은 '무엇인가를 차곡차곡 쌓아올린 더미'라는 뜻

        Priority queue :일반적인 큐(Queue)는 먼저 집어넣은 데이터가 먼저 나오는 FIFO (First In First Out) 구조로 저장하는 선형 자료구조입니다. 하지만 우선순위 큐(Priority Queue)는 들어간 순서에 상관없이 우선순위가 높은 데이터가 먼저 나오는 것을 말합니다. 순위가 같으면 순서에 따라 처리
        
        Heap은 complete binary tree를 기본으로 한 자료구조
            완전 이진트리
            부모와 자식 값 사이에는 대소관계가 성립.
        MaxHeap
            부모 키값이 자식노드 키값보다 큰 힙
            Key(parent) ≥ Key(child)
            가장 큰 값이 루트노드에 있음
                

        MinHeap
            부모 키값이 자식노드 키값보다 작은 힙
            Key(parent) ≤ Key(child)
            가장 작은 값이 루트노드에 있음
        루트 노드의 인덱스 i가 1인 경우 다음과 같은 속성이 있습니다.
        노드 i의 부모노드 인덱스 : i/2
        노드 i의 왼쪽 자식 노드 인덱스 : 2*i
        노드 i의 오른쪽 자식 노드 인덱스 : 2*i + 1
        
        max heap 기준

        heapify 정렬하는 과정
        Extract
            Step 1. 루트 노드 값을 추출합니다.
            Step 2. heap 마지막 요소를 루트 노드에 배치합니다.
            Step 3. 루트 노드부터 hepify를 수행합니다.

        increase
            Step 1. 값이 n인 노드를 value으로 증가시킵니다.
            Step 2. 부모 노드와 값을 비교합니다. 부모 노드가 더 작아 heap 속성을 위배하므로 부모 노드와 값을 바꿉니다.
            Step 3. 하위 노드와 부모 노드와 값을 비교합니다. 부모 노드가 더 작다면 heap 속성을 위배하므로 부모 노드와 값을 바꿉니다.
            Step 4. 더 이상 heap 속성을 위배하지 않기 때문에 종료합니다.
        Insert
            step 1. 힙의 끝에 최솟값을 삽입합니다.
            step 2. increase value 함수를 호출합니다.
            추가된 최소값을 n로 증가시킵니다.
            부모 노드와 값을 비교합니다. 부모 노드값이 더 작다면  교환합니다. (힙속성 위배)
        Delete
            step1~2. increase value를 수행합니다.
                step1. 값 n을 MAX값으로 증가시킵니다.
                step2. max 값을 루트 노드에 위치시킵니다.
            step3~4. extract를 수행합니다.
                step3. 힙의 마지막 요소를 루트로 이동시킵니다.
                step4. 루트 노드부터 max_heapify를 수행합니다.
    2. 
        이진트리(binary)
            부모노드에 자식노드가 2개 이하인 트리구조
        이진검색트리(binary search)/////sql의 인덱스
            왼쪽 자식 노드는 부모 노드보다 작은값
            오른쪽 자식 노드는 부모보다 큰값
        정렬을 지원함

6. Hashmap 
    1. 쌍으로 자료를 관리함
    2. 가장 많이 사용되는 map 인터페이스 기반 클래스
    3. 검색을 위한 자료구조 
        key/value
    
    
        




프로그램 메모리 구조에서 Stack은 함수의 호출 내역이 순차적으로 쌓이며 지역변수를 저장하는 공간이 된다. 이 방식이 Stack의 형식을 그대로 사용하기 때문에 이름이 Stack이다.

그렇다면 동적 데이터가 할당되는 Heap은 어떠할까?
메모리 구조의 Heap 영역은 자료구조 Heap을 사용하지 않는다!
Several authors began about 1975 to call the pool of available memory a "heap."

He doesn't say which authors and doesn't give references to any specific papers, but does say that the use of the term "heap" in relation to priority queues is the traditional sense of the word.


    


