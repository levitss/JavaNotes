1. 자바의 메모리모델
    1)java.exe가 실행되면서 jvm이 생성됨
    -메모리공간활용의 효율성을 높이기 위해 메모리공간을 여러공간으로 나눔
    
    2) 함수 호출과 메모리
    ----------------------------------------
    쓰레드 별로 생성되는 데이터 영역

        -pc register
        쓰레드마다 존재. 하나의 메소드코드를 jvm의 쓰레드라고 한다.
        현재 실행된 쓰레드의 메소드코드가 네이티브 메소드가 아니면 pcregister에 jvm 명령 주소가 저장되고, 네이티브 메소드면 바이트코드의 명령어가 없기때문에 pcregister가 비어있음
        
        -JVM Stacks (stack area(stack frame))
            -함수가 호출되면 지역변수, 매개변수가 프레임 형태로 생성되어 stack area에 쌓였다가 사라짐
                -함수의 수행이 끝나면 자동으로 반환되는 메모리
            frame을 push(저장)하거나 pop(제거)하는 동작만 수행.
            
            쓰레드가 허락된 스택 용량보다 많은 계산을 필요로 하면 stack over flow error.
            쓰레드의 스택을 확장할 만큼 충분한 메모리가 없거나, 새로 생성될 쓰레드에게 메모리가 부족해 스택을 할당할 수 없는경우 OutOfMemomyError 발생

        -Native method stacks
        자바 이외의 언어로 작성된 코드를 실행할 때 할당됨. 일반적인 c스택을 사용. 
            
      ----------------------------------------------
      전체 쓰레드가 공유하는 데이터영역      
        -heap area  
            -클래스의 객체(인스턴스),배열이 new 연산자에 의해 힙 영역에 동적으로 생성됨.
            생성된 객체는 자동 저장소 관리 시스템인 garbage collector에 의해 사용이 없음이 확인되면 자동으로 제거됨.(c++은 관리 안해줌)
            가비지컬렉터가 사용할 수 있는 것 보다 많은 Heap이 필요하면 outofmemory error가 발생.
            -하나의 클래스로부터 여러개의 인스턴스가 생성되고 각각 다른 메모리 주소를 가짐.

        -method area(static)
            -프로그램 실행에 대한 코드, 클래스의 필드, 스태틱 변수 및 메서드, 런타임 상수 풀이 생성됨.
            프로그램 시작 전에 로드되고 프로그램 종료시 소멸됨.
            논리적으로 힙의 일부분. jvm벤더가 가비지 컬렉션 여부를 선택할 수 있다.
            













Static area(스태틱 메모리 영역)(method area)
    하나의 JAVA 파일은 크게 필드(field), 생성자(constructor), 메소드(method)로 구성된다. 그중 필드 부분에서 선언된 변수(전역변수)와 정적 멤버변수(static이 붙은 자료형) Static 영역에 데이터를 저장한다. Static 영역의 데이터는 프로그램의 시작부터 종료가 될 때까지 메모리에 남아있게 된다.
Stack area(스택 메모리 영역)
    메소드 내에서 정의하는 기본 자료형(int, double, byte, long, boolean 등)에 해당되는 지역변수(매개 변수 및 블럭문 내 변수 포함)의 데이터의 값이 저장되는 공간이 Stack(스택) 영역이다. 해당 메소드가 호출될 때 메모리에 할당되고 종료되면 메모리가 해제된다. 
    		for(int i=0; i<5; i++){
		}
//		System.out.println(i); 컴파일 에러->i는 for문이 끝나 stack에서 해제되었음
Heap area
     참조형(Reference Type)의 데이터 타입을 갖는 객체(인스턴스), 배열 등은 Heap 영역에 데이터가 저장된다. 이때 변수(객체, 객체변수, 참조변수)는 Stack 영역의 공간에서 실제 데이터가 저장된 Heap 영역의 참조값(reference value, 해시코드 / 메모리에 저장된 주소를 연결해주는 값)을 new 연산자를 통해 리턴 받는다. 
     다시 말하면 실제 데이터를 갖고 있는 Heap 영역의 참조 값을 Stack 영역의 객체가 갖고 있다. 이렇게 리턴 받은 참조 값을 갖고 있는 객체를 통해서만 해당 인스턴스를 핸들 할 수 있다.
    String a=new String("a");
    String b=new String("a");
    일때 a==b는 false임
    값은 같으나 저장된 주소값이 다르기 때문임.
    
class A{}

public class HeapArea {
	public static void main(String[] args) {
		A a = null; // A타입의 a객체 선언 및 Stack 영역 공간 할당
		System.out.println(a); // 결과 : null
		a = new A(); // Heap 메모리에 공간 할당 및 객체(a)에 참조값 할당
		System.out.println(a); // 결과 : @15db9742
	}
}

스택이 날라가서 주소가 상실되어 가비지컬렉터가 작동하거나 jvm이 종료될때까지 heap 메모리가 유지 된다.
인스턴스의 소멸방법과 소멸시점이 stack에 할당되는 변수들과는 다르기때문에 heap영역에 별도로 저장한다.

https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html
사실 메서드 영역은 논리적으로 일종의 heap영역의 일부
    ////////////////////////////////////////////////////////////


