1.Stream
    데이터의 흐름
    배열 컬렉션의 형태로 구성된 데이터
    람다를 이용해 간결하고 직관적으로 프로세스하게 해줌
    -배열 컬렉션을 대상으로 연산하고 수행
    일관성있는 연산으로 자료의 처리를 쉽고 간단하게 함
    for, while 등을 이용하던 기존 loop를 대체
    손쉽게 병렬처리를 할 수 있게 해줌
    자료처리에 대한 추상화가 구현되었다고 함

스트림특징
    한번 생성하고 사용한 스트림은 재사용 할 수 없음
        자료에 대한 스트림을 생성하여 연산을 수행하면 스트림은 소멸됨
        다른 연산을 수행하기 위해서는 스트림을 다시 생성해야 함
    기존 데이터를 변경하지않음
        자료에 대한 스트림을 생성하면 
        스트림이 사용하는 메모리 공간은 별도로 생성되므로 
        연산이 수행되어도 기존 자료의 메모리에 영향을 주지 않음
    스트림 연산은 중간 연산과 최종 연산으로 구분 됨
        스트림에 대한 중간 연산은 여러 개가 적용될 수 있지만 최종 연산은 하나뿐.
        최종연산이 있어야 중간 연산이 실행되는 구조.
            -지연연산
            -중간연산에 대한 결과를 연산 중에는 알 수 없다
스트림생성

스트림 중간연산 최종연산
    중간연산
        filter()
            조건에 만족하는 데이터만 
        map()
            데이터를 변형하는데 사용
            데이터에 해당 함수가 적용된 결과물을 제공하는 스트림을 리턴
        sorted() 
            데이터가 순서대로 정렬된 스트림을 리턴
        중간연산과 최종연산에 대한 구현은 람다식을 사용함
    최종연산
        foreach count sum 등등
    스트림이 관리하는 자료를 하나씩 소모해가면서 연산이 수행됨
    최종 연산 후에 스트림은 더 이상 다른 연산을 적용할 수 없음
    여러가지 중간 처리를 이어붙이는 것이 가능
        source(배열,컬렉션)->중간처리->종결처리
        


